SELECTIVE-REPEAT - client:

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>

#define timeoutValue 5
#define packetCount 10
#define windowSize 3

typedef struct Packet {
    int id;
    int sent;
} Packet;

Packet packets[packetCount];
pthread_t thread[packetCount], receiveThread;
int sockfd;
struct sockaddr_in addr;
int windowStart, windowEnd;
int nextToSend;

void *sendPacket(void *sendPacket) {
    Packet *packet = (Packet *) sendPacket;
    char buffer[1024];
    while (packet->sent == 0) {
        printf("Client: Sending packet %d\n", packet->id);
        bzero(buffer, 1024);
        sprintf(buffer, "%d", packet->id);
        sendto(sockfd, buffer, 1024, 0, (struct sockaddr *) &addr, sizeof(addr));
        sleep(timeoutValue);
        if (packet->sent == 0)
            printf("Client: Timeout for packet %d\n", packet->id);
    }
    return NULL;
}

void *receivePacket(void *arg) {
    socklen_t addr_size = sizeof(addr);
    char buffer[1024];
    while (1) {
        bzero(buffer, 1024);
        recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr *) &addr, &addr_size);
        char msg[20];
        int packetID;
        sscanf(buffer, "%s %d", msg, &packetID);
        if (strcmp(msg, "NACK") == 0) {
            printf("Client: Received negative acknowledgement for packet %d\nSending again\n", packetID);
            pthread_cancel(thread[packetID - 1]);
            pthread_create(&thread[packetID - 1], NULL, sendPacket, (void *) &packets[packetID - 1]);
        } else if (strcmp(msg, "ACK") == 0) {
            printf("Client: Received acknowledgement for packet %d\n", packetID);
            packets[packetID - 1].sent = 1;
            if (windowStart == packetID - 1) {
                while (packets[windowStart].sent == 1) {
                    windowStart++;
                    if (windowEnd < packetCount)
                        windowEnd++;
                }
            }
        } else {
            printf("Client: Invalid message\n");
        }
    }
    return NULL;
}

int main() {
    for (int i = 0; i < packetCount; ++i) {
        packets[i].id = i + 1;
        packets[i].sent = 0;
    }
    char *ip = "127.0.0.100";
    int port = 2878;
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("[-]Socket error");
        exit(1);
    }
    memset(&addr, '\0', sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = inet_addr(ip);
    pthread_create(&receiveThread, NULL, receivePacket, NULL);
    windowStart = 0;
    windowEnd = windowStart + windowSize - 1;
    for (int i = windowStart; i <= windowEnd; ++i) {
        pthread_create(&thread[i], NULL, sendPacket, (void *) &packets[i]);
    }
    nextToSend = windowEnd + 1;
    while (windowStart < packetCount) {
        if (nextToSend <= windowEnd && nextToSend < packetCount) {
            pthread_create(&thread[nextToSend], NULL, sendPacket, (void *) &packets[nextToSend]);
            nextToSend++;
        }
    }
    for (int i = 0; i < packetCount; ++i) {
        pthread_join(thread[i], NULL);
    }
    pthread_join(receiveThread, NULL);
    close(sockfd);
    return 0;
}



SELECTIVE REPEAT - server

#include<stdio.h>
#include<string.h>
#include<time.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>

#define packetCount 10

typedef struct packet{
        int id;
        int received;
}packet;

packet packets[packetCount];

void main(){
        for(int i = 0;i<packetCount;++i){
                packets[i].id = i+1;
                packets[i].received = 0;
        }
        char *ip = "127.0.0.100";
        int port = 2878;
        srand(time(0));
        int sockfd;
        struct sockaddr_in server_addr,client_addr;
        char buffer[1024];
        socklen_t addr_size;
        int n;
        sockfd = socket(AF_INET,SOCK_DGRAM,0);
        if(sockfd < 0){
                perror("[-]Socket error");
                exit(1);
        }
        memset(&server_addr,'\0',sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(port);
        server_addr.sin_addr.s_addr = inet_addr(ip);
        n = bind(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(n<0){
                perror("[+]bind error");
                exit(1);
        }
        while(1){
                bzero(buffer,1024);
                addr_size = sizeof(client_addr);
                recvfrom(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,&addr_size);
                sleep(1);
                int packet = atoi(buffer);
                if (packets[packet-1].received == 1 || rand() % 5 == 0)
                        continue;
                else if(rand() % 4 == 0){
                        printf("Server:Received corrupted packet %s.Sending negative acknowloedgement\n",buffer);
                        sprintf(buffer,"NACK %d",packet);
                        sendto(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,sizeof(client_addr));
                }
                else{
                        printf("Server:Received packet %s.Sending acknowledgement\n",buffer);
                        sprintf(buffer,"ACK %d",packet);
                        sendto(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,sizeof(client_addr));
                        packets[packet-1].received = 1;
                }
        }
}













